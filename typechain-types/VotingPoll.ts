/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface VotingPollInterface extends utils.Interface {
  functions: {
    "getOptionsList(string)": FunctionFragment;
    "getVotingPoll(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "setVote(uint256,string)": FunctionFragment;
    "title()": FunctionFragment;
    "vote()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getOptionsList"
      | "getVotingPoll"
      | "owner"
      | "setVote"
      | "title"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getOptionsList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPoll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;
  encodeFunctionData(functionFragment: "vote", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getOptionsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPoll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {};
}

export interface VotingPoll extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingPollInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOptionsList(
      _options: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotingPoll(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setVote(
      _vote: BigNumberish,
      _options: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    title(overrides?: CallOverrides): Promise<[string]>;

    vote(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getOptionsList(
    _options: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingPoll(
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, BigNumber]>;

  owner(overrides?: CallOverrides): Promise<string>;

  setVote(
    _vote: BigNumberish,
    _options: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  title(overrides?: CallOverrides): Promise<string>;

  vote(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getOptionsList(
      _options: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPoll(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<string>;

    setVote(
      _vote: BigNumberish,
      _options: string,
      overrides?: CallOverrides
    ): Promise<void>;

    title(overrides?: CallOverrides): Promise<string>;

    vote(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getOptionsList(
      _options: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPoll(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setVote(
      _vote: BigNumberish,
      _options: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    title(overrides?: CallOverrides): Promise<BigNumber>;

    vote(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getOptionsList(
      _options: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPoll(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setVote(
      _vote: BigNumberish,
      _options: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    title(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
