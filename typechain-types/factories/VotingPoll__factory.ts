/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VotingPoll, VotingPollInterface } from "../VotingPoll";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_title_f",
        type: "string",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_options",
        type: "string",
      },
    ],
    name: "getOptionsList",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "getVotingPoll",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vote",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_options",
        type: "string",
      },
    ],
    name: "setVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "title",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ee038038062000ee083398181016040528101906200003791906200023a565b80600081905550826001908051906020019062000056929190620000ea565b5081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060038190555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506200048b565b828054620000f8906200037c565b90600052602060002090601f0160209004810192826200011c576000855562000168565b82601f106200013757805160ff191683800117855562000168565b8280016001018555821562000168579182015b82811115620001675782518255916020019190600101906200014a565b5b5090506200017791906200017b565b5090565b5b80821115620001965760008160009055506001016200017c565b5090565b6000620001b1620001ab84620002d2565b620002a9565b905082815260208101848484011115620001ca57600080fd5b620001d784828562000346565b509392505050565b600081519050620001f08162000457565b92915050565b600082601f8301126200020857600080fd5b81516200021a8482602086016200019a565b91505092915050565b600081519050620002348162000471565b92915050565b6000806000606084860312156200025057600080fd5b600084015167ffffffffffffffff8111156200026b57600080fd5b6200027986828701620001f6565b93505060206200028c86828701620001df565b92505060406200029f8682870162000223565b9150509250925092565b6000620002b5620002c8565b9050620002c38282620003b2565b919050565b6000604051905090565b600067ffffffffffffffff821115620002f057620002ef62000417565b5b620002fb8262000446565b9050602081019050919050565b600062000315826200031c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200036657808201518184015260208101905062000349565b8381111562000376576000848401525b50505050565b600060028204905060018216806200039557607f821691505b60208210811415620003ac57620003ab620003e8565b5b50919050565b620003bd8262000446565b810181811067ffffffffffffffff82111715620003df57620003de62000417565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620004628162000308565b81146200046e57600080fd5b50565b6200047c816200033c565b81146200048857600080fd5b50565b610a45806200049b6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630301047c146100675780634a79d50c14610097578063632a9a52146100b55780638da5cb5b146100d3578063c366c56c146100f1578063fa2176df1461010d575b600080fd5b610081600480360381019061007c91906104e8565b61013f565b60405161008e9190610708565b60405180910390f35b61009f610167565b6040516100ac91906106a6565b60405180910390f35b6100bd6101f5565b6040516100ca9190610708565b60405180910390f35b6100db6101fb565b6040516100e8919061068b565b60405180910390f35b61010b60048036038101906101069190610552565b610221565b005b61012760048036038101906101229190610529565b6102f0565b60405161013693929190610723565b60405180910390f35b60006002826040516101519190610674565b9081526020016040518091039020549050919050565b600180546101749061085c565b80601f01602080910402602001604051908101604052809291908181526020018280546101a09061085c565b80156101ed5780601f106101c2576101008083540402835291602001916101ed565b820191906000526020600020905b8154815290600101906020018083116101d057829003601f168201915b505050505081565b60035481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a8906106e8565b60405180910390fd5b816003819055506002816040516102c89190610674565b908152602001604051809103902060008154809291906102e7906108bf565b91905055505050565b600060606000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d906106e8565b60405180910390fd5b60005484146103ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c1906106c8565b60405180910390fd5b60005460016003548180546103de9061085c565b80601f016020809104026020016040519081016040528092919081815260200182805461040a9061085c565b80156104575780601f1061042c57610100808354040283529160200191610457565b820191906000526020600020905b81548152906001019060200180831161043a57829003601f168201915b505050505091509250925092509193909250565b600061047e61047984610786565b610761565b90508281526020810184848401111561049657600080fd5b6104a184828561081a565b509392505050565b600082601f8301126104ba57600080fd5b81356104ca84826020860161046b565b91505092915050565b6000813590506104e2816109f8565b92915050565b6000602082840312156104fa57600080fd5b600082013567ffffffffffffffff81111561051457600080fd5b610520848285016104a9565b91505092915050565b60006020828403121561053b57600080fd5b6000610549848285016104d3565b91505092915050565b6000806040838503121561056557600080fd5b6000610573858286016104d3565b925050602083013567ffffffffffffffff81111561059057600080fd5b61059c858286016104a9565b9150509250929050565b6105af816107de565b82525050565b60006105c0826107b7565b6105ca81856107c2565b93506105da818560208601610829565b6105e381610995565b840191505092915050565b60006105f9826107b7565b61060381856107d3565b9350610613818560208601610829565b80840191505092915050565b600061062c6009836107c2565b9150610637826109a6565b602082019050919050565b600061064f601b836107c2565b915061065a826109cf565b602082019050919050565b61066e81610810565b82525050565b600061068082846105ee565b915081905092915050565b60006020820190506106a060008301846105a6565b92915050565b600060208201905081810360008301526106c081846105b5565b905092915050565b600060208201905081810360008301526106e18161061f565b9050919050565b6000602082019050818103600083015261070181610642565b9050919050565b600060208201905061071d6000830184610665565b92915050565b60006060820190506107386000830186610665565b818103602083015261074a81856105b5565b90506107596040830184610665565b949350505050565b600061076b61077c565b9050610777828261088e565b919050565b6000604051905090565b600067ffffffffffffffff8211156107a1576107a0610966565b5b6107aa82610995565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006107e9826107f0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561084757808201518184015260208101905061082c565b83811115610856576000848401525b50505050565b6000600282049050600182168061087457607f821691505b6020821081141561088857610887610937565b5b50919050565b61089782610995565b810181811067ffffffffffffffff821117156108b6576108b5610966565b5b80604052505050565b60006108ca82610810565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156108fd576108fc610908565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e6f206578697374650000000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207573652074686520666163746f72790000000000600082015250565b610a0181610810565b8114610a0c57600080fd5b5056fea2646970667358221220cf193b55787e43ef5c2e2cb51c43562e08782f7195aa881d1c3fc8553df36ce964736f6c63430008040033";

type VotingPollConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingPollConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VotingPoll__factory extends ContractFactory {
  constructor(...args: VotingPollConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _title_f: string,
    _owner: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VotingPoll> {
    return super.deploy(
      _title_f,
      _owner,
      _id,
      overrides || {}
    ) as Promise<VotingPoll>;
  }
  override getDeployTransaction(
    _title_f: string,
    _owner: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_title_f, _owner, _id, overrides || {});
  }
  override attach(address: string): VotingPoll {
    return super.attach(address) as VotingPoll;
  }
  override connect(signer: Signer): VotingPoll__factory {
    return super.connect(signer) as VotingPoll__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingPollInterface {
    return new utils.Interface(_abi) as VotingPollInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VotingPoll {
    return new Contract(address, _abi, signerOrProvider) as VotingPoll;
  }
}
