/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VotingPoll, VotingPollInterface } from "../VotingPoll";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_title_f",
        type: "string",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_options",
        type: "string",
      },
    ],
    name: "getOptionsList",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "getVotingPoll",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_vote",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_options",
        type: "string",
      },
    ],
    name: "setVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "title",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161089d38038061089d83398101604081905261002f91610132565b6000819055825161004790600190602086019061007d565b5050600480546001600160a01b039092166001600160a01b03199283161790556000600355600580549091163317905550610268565b82805461008990610217565b90600052602060002090601f0160209004810192826100ab57600085556100f1565b82601f106100c457805160ff19168380011785556100f1565b828001600101855582156100f1579182015b828111156100f15782518255916020019190600101906100d6565b506100fd929150610101565b5090565b5b808211156100fd5760008155600101610102565b80516001600160a01b038116811461012d57600080fd5b919050565b600080600060608486031215610146578283fd5b83516001600160401b038082111561015c578485fd5b818601915086601f83011261016f578485fd5b81518181111561018157610181610252565b604051601f8201601f19908116603f011681019083821181831017156101a9576101a9610252565b816040528281526020935089848487010111156101c4578788fd5b8791505b828210156101e557848201840151818301850152908301906101c8565b828211156101f557878484830101525b9650610205915050868201610116565b93505050604084015190509250925092565b600181811c9082168061022b57607f821691505b6020821081141561024c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610626806102776000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630301047c146100675780634a79d50c1461008d578063632a9a52146100a25780638da5cb5b146100ab578063c366c56c146100d6578063fa2176df146100eb575b600080fd5b61007a610075366004610425565b61010d565b6040519081526020015b60405180910390f35b610095610135565b6040516100849190610505565b61007a60035481565b6004546100be906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b6100e96100e4366004610478565b6101c3565b005b6100fe6100f9366004610460565b61025e565b6040516100849392919061051f565b600060028260405161011f91906104e9565b9081526020016040518091039020549050919050565b6001805461014290610578565b80601f016020809104026020016040519081016040528092919081815260200182805461016e90610578565b80156101bb5780601f10610190576101008083540402835291602001916101bb565b820191906000526020600020905b81548152906001019060200180831161019e57829003601f168201915b505050505081565b6005546001600160a01b031633146102225760405162461bcd60e51b815260206004820152601b60248201527f596f75206e65656420746f207573652074686520666163746f7279000000000060448201526064015b60405180910390fd5b60038290556040516002906102389083906104e9565b9081526040519081900360200190208054906000610255836105b3565b91905055505050565b60055460009060609082906001600160a01b031633146102c05760405162461bcd60e51b815260206004820152601b60248201527f596f75206e65656420746f207573652074686520666163746f727900000000006044820152606401610219565b60005484146102fd5760405162461bcd60e51b81526020600482015260096024820152684e6f2065786973746560b81b6044820152606401610219565b600054600160035481805461031190610578565b80601f016020809104026020016040519081016040528092919081815260200182805461033d90610578565b801561038a5780601f1061035f5761010080835404028352916020019161038a565b820191906000526020600020905b81548152906001019060200180831161036d57829003601f168201915b505050505091509250925092509193909250565b600082601f8301126103ae578081fd5b813567ffffffffffffffff808211156103c9576103c96105da565b604051601f8301601f19908116603f011681019082821181831017156103f1576103f16105da565b81604052838152866020858801011115610409578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610436578081fd5b813567ffffffffffffffff81111561044c578182fd5b6104588482850161039e565b949350505050565b600060208284031215610471578081fd5b5035919050565b6000806040838503121561048a578081fd5b82359150602083013567ffffffffffffffff8111156104a7578182fd5b6104b38582860161039e565b9150509250929050565b600081518084526104d5816020860160208601610548565b601f01601f19169290920160200192915050565b600082516104fb818460208701610548565b9190910192915050565b60208152600061051860208301846104bd565b9392505050565b83815260606020820152600061053860608301856104bd565b9050826040830152949350505050565b60005b8381101561056357818101518382015260200161054b565b83811115610572576000848401525b50505050565b600181811c9082168061058c57607f821691505b602082108114156105ad57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156105d357634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212204b8425910e2913153791aea4fdc82ba01559f5a239b548f15a1f1016e6030f8464736f6c63430008040033";

type VotingPollConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingPollConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VotingPoll__factory extends ContractFactory {
  constructor(...args: VotingPollConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _title_f: string,
    _owner: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VotingPoll> {
    return super.deploy(
      _title_f,
      _owner,
      _id,
      overrides || {}
    ) as Promise<VotingPoll>;
  }
  override getDeployTransaction(
    _title_f: string,
    _owner: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_title_f, _owner, _id, overrides || {});
  }
  override attach(address: string): VotingPoll {
    return super.attach(address) as VotingPoll;
  }
  override connect(signer: Signer): VotingPoll__factory {
    return super.connect(signer) as VotingPoll__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingPollInterface {
    return new utils.Interface(_abi) as VotingPollInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VotingPoll {
    return new Contract(address, _abi, signerOrProvider) as VotingPoll;
  }
}
