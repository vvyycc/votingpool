/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VotingPoll, VotingPollInterface } from "../VotingPoll";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_title_f",
        type: "string",
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "options",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "title",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vote",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000936380380620009368339818101604052810190620000379190620002c8565b81600090805190602001906200004f929190620000ee565b506040518060600160405280600160ff168152602001600260ff168152602001600360ff168152506001906003620000899291906200017f565b506000600260006101000a81548160ff02191690831515021790555080600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620004e0565b828054620000fc90620003eb565b90600052602060002090601f0160209004810192826200012057600085556200016c565b82601f106200013b57805160ff19168380011785556200016c565b828001600101855582156200016c579182015b828111156200016b5782518255916020019190600101906200014e565b5b5090506200017b919062000220565b5090565b826003601f016020900481019282156200020d5791602002820160005b83821115620001dc57835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026200019c565b80156200020b5782816101000a81549060ff0219169055600101602081600001049283019260010302620001dc565b505b5090506200021c919062000220565b5090565b5b808211156200023b57600081600090555060010162000221565b5090565b60006200025662000250846200034b565b62000322565b9050828152602081018484840111156200026f57600080fd5b6200027c848285620003b5565b509392505050565b6000815190506200029581620004c6565b92915050565b600082601f830112620002ad57600080fd5b8151620002bf8482602086016200023f565b91505092915050565b60008060408385031215620002dc57600080fd5b600083015167ffffffffffffffff811115620002f757600080fd5b62000305858286016200029b565b9250506020620003188582860162000284565b9150509250929050565b60006200032e62000341565b90506200033c828262000421565b919050565b6000604051905090565b600067ffffffffffffffff82111562000369576200036862000486565b5b6200037482620004b5565b9050602081019050919050565b60006200038e8262000395565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620003d5578082015181840152602081019050620003b8565b83811115620003e5576000848401525b50505050565b600060028204905060018216806200040457607f821691505b602082108114156200041b576200041a62000457565b5b50919050565b6200042c82620004b5565b810181811067ffffffffffffffff821117156200044e576200044d62000486565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620004d18162000381565b8114620004dd57600080fd5b50565b61044680620004f06000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063409e2205146100515780634a79d50c14610081578063632a9a521461009f57806367e404ce146100bd575b600080fd5b61006b600480360381019061006691906101e1565b6100db565b60405161007891906102c8565b60405180910390f35b610089610105565b60405161009691906102a6565b60405180910390f35b6100a7610193565b6040516100b4919061028b565b60405180910390f35b6100c56101a6565b6040516100d29190610270565b60405180910390f35b600181600381106100eb57600080fd5b60209182820401919006915054906101000a900460ff1681565b6000805461011290610387565b80601f016020809104026020016040519081016040528092919081815260200182805461013e90610387565b801561018b5780601f106101605761010080835404028352916020019161018b565b820191906000526020600020905b81548152906001019060200180831161016e57829003601f168201915b505050505081565b600260009054906101000a900460ff1681565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000813590506101db816103f9565b92915050565b6000602082840312156101f357600080fd5b6000610201848285016101cc565b91505092915050565b610213816102ff565b82525050565b61022281610311565b82525050565b6000610233826102e3565b61023d81856102ee565b935061024d818560208601610354565b610256816103e8565b840191505092915050565b61026a81610347565b82525050565b6000602082019050610285600083018461020a565b92915050565b60006020820190506102a06000830184610219565b92915050565b600060208201905081810360008301526102c08184610228565b905092915050565b60006020820190506102dd6000830184610261565b92915050565b600081519050919050565b600082825260208201905092915050565b600061030a8261031d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610372578082015181840152602081019050610357565b83811115610381576000848401525b50505050565b6000600282049050600182168061039f57607f821691505b602082108114156103b3576103b26103b9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6104028161033d565b811461040d57600080fd5b5056fea264697066735822122011658de57d1e75ff489893cf9e2e5e29e5a27f83a756ae84c5d64a6d2938130764736f6c63430008040033";

type VotingPollConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingPollConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VotingPoll__factory extends ContractFactory {
  constructor(...args: VotingPollConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _title_f: string,
    _sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VotingPoll> {
    return super.deploy(
      _title_f,
      _sender,
      overrides || {}
    ) as Promise<VotingPoll>;
  }
  override getDeployTransaction(
    _title_f: string,
    _sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_title_f, _sender, overrides || {});
  }
  override attach(address: string): VotingPoll {
    return super.attach(address) as VotingPoll;
  }
  override connect(signer: Signer): VotingPoll__factory {
    return super.connect(signer) as VotingPoll__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingPollInterface {
    return new utils.Interface(_abi) as VotingPollInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VotingPoll {
    return new Contract(address, _abi, signerOrProvider) as VotingPoll;
  }
}
