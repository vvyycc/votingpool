/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VotingFactory,
  VotingFactoryInterface,
} from "../../VotingPollFactory.sol/VotingFactory";

const _abi = [
  {
    inputs: [],
    name: "allVotingPoll",
    outputs: [
      {
        internalType: "contract VotingPoll[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "createVotingPoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "list_voting_poll",
    outputs: [
      {
        internalType: "contract VotingPoll",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "";

type VotingFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VotingFactory__factory extends ContractFactory {
  constructor(...args: VotingFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VotingFactory> {
    return super.deploy(overrides || {}) as Promise<VotingFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VotingFactory {
    return super.attach(address) as VotingFactory;
  }
  override connect(signer: Signer): VotingFactory__factory {
    return super.connect(signer) as VotingFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingFactoryInterface {
    return new utils.Interface(_abi) as VotingFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VotingFactory {
    return new Contract(address, _abi, signerOrProvider) as VotingFactory;
  }
}
